#!/bin/bash

. /opt/simpleban/sban.lib

########################################################################

[ -z "${2}" ] && die 'ip address required'
addr=${2}

[ -z "${1}" ] && die 'filter name required'
filter=${1}

########################################################################

load_conf
load_filter ${filter}

########################################################################

# Mode par défaut: "l3/iptables"
[ -z "${MODE}" ] && MODE="l3"

# Initialiser variables IPT, TABLE et CIDR en fonction du type d'adresse
addr_type ${addr}

# Calculer l'adresse du réseau en fonction de l'adresse IP et de la
# variable CIDR
net=$(get_net ${addr})

# Insertion de l'adresse dans la base de données
${SQLITE} ${DB} "INSERT INTO ${TABLE} VALUES ('${now}','${addr}','${net}','${filter}');"

########################################################################
# Tester l'adresse IP pour tous les critères

for criteria in ${ADDR_TRIGGERS} ; do

	# Analyse du bloc de critères

	crit=${criteria//:/ } # on éclate les paramètres
	crit=(${crit}) # transformation en tableau

	age=${crit[0]}
	max_epoch=$(( ${now} - ${age} ))

	max_count=${crit[1]}

	duration=${crit[2]}
	duration=$(( ${duration} / 60 )) # conversion en minutes pour "atq"

	# Compter les occurences correspondantes
	count=$(${SQLITE} ${DB} "SELECT COUNT(*) FROM ${TABLE} WHERE addr='${addr}' AND epoch >= '${max_epoch}';")

	# Tester si le seuil est atteint
	if [ ${count} -ge ${max_count} ] ; then

		log "'${addr}' + '${filter}' + '${criteria}' => ${count} hits"

		# L'adresse IP est en liste blanche ?
		check_addr_whitelist ${addr}
		if [ $? -eq 0 ] ; then
			log "'${addr}' => WHITELIST"
			exit 0
		fi

		# La résolution inverse de l'adresse IP est en liste blanche ?
		check_reverse_whitelist ${addr}
		if [ $? -eq 0 ] ; then
			log "'${addr}' => WHITELIST_REVERSE"
			exit 0
		fi

		if [ "${ENABLE_BAN}" = "1" ] ; then

			# Boucle de traitement des règles en entrée et en sortie
			for w in -s -d ; do
		
				# Déterminer l'action à effectuer
				# '${s}' est utilisé pour Syslog (BANNED IN / BANNED OUT)
				# '${ww}' utilisé pour le mode "l2/ebtables"
				case ${w} in
					-s)
						a="${ACTION_IN}"
						s="IN"
						case ${proto} in
							IPv4)
								ww="--ip-src"
							;;
							IPv6)
								ww="--ip6-src"
							;;
						esac
					 ;;
					-d)
						a="${ACTION_OUT}"
						s="OUT"
						case ${proto} in
							IPv4)
								ww="--ip-dst"
							;;
							IPv6)
								ww="--ip6-dst"
							;;
						esac
					 ;;
				esac

				# Si une action est definie, mise en place du blocage
				if [ ! -z "${a}" ] ; then

					# Vérifier si une règle existe déjà pour cette adresse
					case ${MODE} in
						l2)
							${EBT} -L ${CHAIN} |egrep -q "^\-p ${proto} ${ww} ${addr} ${a}$"
						;;
						l3)
							${IPT} -C ${CHAIN} ${w} ${addr} ${a} 2>/dev/null >/dev/null
						;;
					esac
					if [ $? -ne 0 ] ; then

						# Mise en place de la règle de blocage
						case ${MODE} in
							l2)
								${EBT} -A ${CHAIN} -p ${proto} ${ww} ${addr} ${a}
							;;
							l3)
								${IPT} -A ${CHAIN} ${w} ${addr} ${a}
							;;
						esac
							
						# Planification du déblocage
						if [ "${ENABLE_UNBAN}" = "1" ] ; then
							case ${MODE} in
								l2)
									echo "${TSP} ${EBT} -D ${CHAIN} -p ${proto} ${ww} ${addr} ${a} 2>/dev/null >/dev/null" |at now +${duration} min 2>/dev/null
								;;
								l3)
									echo "${TSP} ${IPT} -D ${CHAIN} ${w} ${addr} ${a} 2>/dev/null >/dev/null" |at now +${duration} min 2>/dev/null
								;;
							esac
						fi

						# Syslog
						log "'${addr}' + '${filter}' + '${criteria}' => ${MODE} BANNED ${s}"

					else # La règle existe déjà

						# Syslog
						log "'${addr}' + '${filter}' + '${criteria}' => already ${MODE} banned ${s,,}"

					fi

				fi
	
			done

		fi

	fi

done

########################################################################
# Tester le réseau pour tous les critères

for criteria in ${NET_TRIGGERS} ; do

	# Analyse du bloc de critères

	crit=${criteria//:/ } # on éclate les paramètres
	crit=(${crit}) # transformation en tableau

	age=${crit[0]}
	max_epoch=$(( ${now} - ${age} ))

	max_count=${crit[1]}

	duration=${crit[2]}
	duration=$(( ${duration} / 60 )) # conversion en minutes pour "atq"

	# Compter les occurences correspondantes pour ce réseau sans celles
	# de l'adresse IP actuelle.
	count=$(${SQLITE} ${DB} "SELECT COUNT(*) FROM ${TABLE} WHERE addr != '${addr}' AND net='${net}' AND epoch >= '${max_epoch}';")

	# Tester si le seuil est atteint
	if [ ${count} -ge ${max_count} ] ; then

		log "'${addr}' + '${filter}' + '${criteria}' => ${count} hits"

		# L'adresse IP est en liste blanche ?
		check_addr_whitelist ${addr}
		if [ $? -eq 0 ] ; then
			log "'${addr}' => WHITELIST"
			exit 0
		fi

		# La résolution inverse de l'adresse IP est en liste blanche ?
		check_reverse_whitelist ${addr}
		if [ $? -eq 0 ] ; then
			log "'${addr}' => WHITELIST_REVERSE"
			exit 0
		fi

		if [ "${ENABLE_BAN}" = "1" ] ; then

			# Boucle de traitement des règles en entrée et en sortie
			for w in -s -d ; do

				# Déterminer l'action à effectuer
				# '${s}' est utilisé pour Syslog (BANNED IN / BANNED OUT)
				# '${ww}' utilisé pour le mode "l2/ebtables"
				case ${w} in
					-s)
						a="${ACTION_IN}"
						s="IN"
						case ${proto} in
							IPv4)
								ww="--ip-src"
							;;
							IPv6)
								ww="--ip6-src"
							;;
						esac
					 ;;
					-d)
						a="${ACTION_OUT}"
						s="OUT"
						case ${proto} in
							IPv4)
								ww="--ip-dst"
							;;
							IPv6)
								ww="--ip6-dst"
							;;
						esac
					 ;;
				esac

				# Si une action est definie, mise en place du blocage
				if [ ! -z "${a}" ] ; then

					# Vérifier si une règle existe déjà pour ce réseau
					case ${MODE} in
						l2)
							${EBT} -L ${CHAIN} |egrep -q "^\-p ${proto} ${ww} ${net}/${CIDR} ${a}$"
						;;
						l3)
							${IPT} -C ${CHAIN} ${w} ${net}/${CIDR} ${a} 2>/dev/null >/dev/null
						;;
					esac
					if [ $? -ne 0 ] ; then

						# Mise en place de la règle de blocage
						case ${MODE} in
							l2)
								${EBT} -A ${CHAIN} -p ${proto} ${ww} ${net}/${CIDR} ${a}
							;;
							l3)
								${IPT} -A ${CHAIN} ${w} ${net}/${CIDR} ${a}
							;;
						esac

						# Planification du déblocage
						if [ "${ENABLE_UNBAN}" = "1" ] ; then
							case ${MODE} in
								l2)
									echo "${TSP} ${EBT} -D ${CHAIN} -p ${proto} ${ww} ${net}/${CIDR} ${a} 2>/dev/null >/dev/null" |at now +${duration} min 2>/dev/null
								;;
								l3)
									echo "${TSP} ${IPT} -D ${CHAIN} ${w} ${net}/${CIDR} ${a} 2>/dev/null >/dev/null" |at now +${duration} min 2>/dev/null
								;;
							esac
						fi

						# Syslog
						log "'${net}/${CIDR}' + '${filter}' + '${criteria}' => ${MODE} BANNED ${s}"

					else # La règle existe déjà

						# Syslog
						log "'${net}/${CIDR}' + '${filter}' + '${criteria}' => already ${MODE} banned ${s,,}"

					fi

				fi

			done

		fi

	fi

done
